<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
	<head>  
		<meta charset="utf-8" />		
		<title>WebSocket Test</title>
		
		<script type="text/javascript" src="ghWS.js"></script>
		<script type="text/javascript" src="ghMonitor.js"></script>
	</head>

	<body>
		
		<table align='center' border='0'>
			<tr>
				<td>ACD服务器地址(内网IP):</td>
				<td><input id='acdIp' size='20' value='192.216.20.105'/></td>
			</tr>
			<tr>
				<td>Monitor服务器地址:</td>
				<td><input id='serverIp' size='20' value='192.216.20.105'/></td>
			</tr>
			<tr>
				<td>Monitor服务器端口:</td>
				<td><input id='serverPort' size='20' value='11001' /></td>
			</tr>
			<tr>
				<td colspan='2' align='center'><input type='button' value='连接服务器' onclick='connectToServer()'></td>
			</tr>	
		</table>
		
		<table align='center' border='0'>
			<tr valign='top'>
				<td>
					<input type='button' value='断开服务器连接' onclick='disconnectServer()'>
					<br/><br/>
					<input type='button' value='获取在线坐席列表' onclick='getAgentList()'>
					<br/><br/>
					坐席工号:<input id='agentId_state' size='5' value='1001'>&nbsp;<input type='button' value='获取坐席状态' onclick='getAgentState()'>
					<br/><br/>
					坐席分机:<input id='agentId_talk' size='5' value='1001'>&nbsp;<input type='button' value='获取通话状态' onclick='getTalkState()'>
				</td>
				<td>
					<textarea id='logArea' rows='20' cols='80'></textarea>
					<br/><br/>
					<input type='button' value='清除日志信息' onclick='clearLog()'>
				</td>
			</tr>
		</table>
	
	
<script type="text/javascript">
	var monitor = new ghMonitor();
	
	/********************************************************************************************/
	//方法调用部分
	/********************************************************************************************/
	
	function connectToServer(){
		var serverIp = document.getElementById("serverIp").value;
		var serverPort = document.getElementById("serverPort").value;
		if( serverIp == "" || serverPort == "" ){
			alert( "请输入服务器的地址及端口！" );
			return;
		}
		monitor.ConnectToMonitorServer( serverIp, serverPort );
		addLog( "尝试连接服务器：" + serverIp + ":" + serverPort );
	}
	
	function disconnectServer(){
		monitor.DisConnectToMonitorServer();
		addLog( "尝试断开服务器连接" );
	}
	
	function regToServer(){
		var r = monitor.RegToMonitorServer();
		addLog( "尝试注册到服务器:" + r );
	}
	
	function getAgentList(){
		var acdIp = document.getElementById("serverIp").value;
		var r = monitor.GetAllAgentID( acdIp );
		addLog( "尝试获取在线坐席列表:" + r );
	}
	
	function getAgentState(){
		var agentId = document.getElementById("agentId_state").value;
		var acdIp = document.getElementById("acdIp").value;
		var r = monitor.ChkAgentState( acdIp, agentId );
		addLog( "尝试获取" + agentId + "坐席状态:" + r );
	}
	
	function getTalkState(){
		var agentId = document.getElementById("agentId_talk").value;
		var acdIp = document.getElementById("acdIp").value;
		var r = monitor.ChkAgentTalkState( acdIp, agentId );
		addLog( "尝试获取" + agentId + "通话状态:" + r );
	}
	
	function addLog( msg ){
		var org_msg = document.getElementById("logArea").value;
		document.getElementById("logArea").value = org_msg + "\r\n" + msg;
	}
	
	function clearLog(){
		document.getElementById("logArea").value = "";
	}
	
	/********************************************************************************************/
	//事件处理部分
	/********************************************************************************************/
	
	//连接到服务器的事件处理
	monitor.connectServerCallback(function() {
		addLog( "connectServerCallback:与服务器建立连接成功" );
		regToServer();
  });
  
  //断开服务器连接的事件处理
	monitor.disconnectServerCallback(function() {
		addLog( "disconnectServerCallback:与服务器断开连接" );
  });	
	
	//注册到服务器的事件处理
	monitor.regServerCallback(function( bResult, iReason ) {
		if( bResult ){
			addLog( "regServerCallback:注册到服务器成功" );
		}
		else{
			addLog( "regServerCallback:注册到服务器失败" );
		}
  });
  
  //获取在线坐席信息的事件处理
	monitor.getAllAgentInfoCallback(function(iNumAllAgent, szAgentID) {
		addLog( "getAllAgentInfoCallback: 坐席数量=" + iNumAllAgent + ",坐席工号列表=" + szAgentID );
  });
	
	//坐席状态上报事件处理
	monitor.agentStateCallback(function(szAgentID, szAgentExt, AgentName, iAgentState, iTimeLen, iGroupID) {
		addLog( "agentStateCallback: 坐席工号=" + szAgentID + ",坐席分机号码=" + szAgentExt + ",坐席姓名=" + AgentName + ",坐席状态=" + iAgentState + ",持续时长=" + iTimeLen + ",坐席组号=" + iGroupID );
  });
  
  //通话状态上报事件处理
	monitor.talkStateCallback(function(szAgentID, szAgentExt, iTalkState, szRemoteNum, szThirdParty) {
		addLog( "talkStateCallback: 坐席工号=" + szAgentID + ",坐席分机号码=" + szAgentExt + ",通话状态=" + iTalkState + ",通话号码=" + szRemoteNum + ",三方号码=" + szThirdParty );
  });
  
  //组排队信息变化事件处理
	monitor.groupQueueChangedCallback(function(iQueueCount, szGroupID, szCallerList) {
		addLog( "groupQueueChangedCallback: 排队数=" + iQueueCount + ",排队号码=" + szCallerList );
  });
	
	
</script>
	步骤：<br>
	<ol>
	<li>连接服务器，在连接成功后调注册方法，普通版本ACD IP填写内网ip，多用户版本写127.0.0.1</li>
	<li>注册成功后会上报目前所有已登录的坐席状态agentStateCallback</li>
	<li>后续坐席状态变化时会自动上报，持续时长是这个状态的初始值，如果要给状态计时，需要由页面完成</li>
	<li>排队信息关注groupQueueChangedCallback事件，每当排队信息变化时，会上报对应组的排队数和具体号码</li>
	</ol>
	</body>
</html>