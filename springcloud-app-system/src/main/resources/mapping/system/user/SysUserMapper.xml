<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jn.system.user.dao.SysUserMapper">
    <resultMap id="BaseResultMap" type="com.jn.system.user.vo.SysUserDepartmentPostVO">
        <id column="id" jdbcType="VARCHAR" property="id"/>
        <result column="account" jdbcType="VARCHAR" property="account"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>

        <collection property="sysDepartmentPostVOList" ofType="com.jn.system.dept.vo.SysDepartmentPostVO">
            <result property="departmentId" column="departmentId" jdbcType="VARCHAR"/>
            <result property="departmentName" column="department_name" jdbcType="VARCHAR"/>
            <result property="postId" column="postId" jdbcType="VARCHAR"/>
            <result property="postName" column="post_name" jdbcType="VARCHAR"/>
            <result property="parentId" column="parent_id" jdbcType="VARCHAR"/>
            <result property="level" column="level" jdbcType="VARCHAR"/>
            <result property="isDefault" column="is_default" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>

    <sql id="Base_Column_List">
        id,account,password,name,phone,email,creator,create_time as createTime,status
    </sql>

    <sql id="Get_User_Page_Column">
        t.id,
        t.account,
        t.name,
        t.phone,
        t.email,
        t.status,
        t.remark,
        t.create_time as createTime,
        t.wechat_account as wechatAccount,
        tt.department_name as departmentName,
        tt.post_name as postName,
        tt.postTypeName,
        tt.department_id
    </sql>

    <sql id="Column_list">
            tsu.id,
            tsu.account,
            tsu.`password`,
            tsu.`name`,
            tsu.phone,
            tsu.email,
            tsu.creator,
            tsu.create_time,
            tsu.`status`,

            tsd.id as did,
            tsd.department_name,
            tsd.creator as departmentCreator,
            tsd.create_time as departmentCreateTime,
            tsd.`status` as departmentStatus ,

            tsp.id as pid,
            tsp.post_name,
            tsp.creator as postCreator,
            tsp.create_time as postCreateTime,
            tsp.`status` as postStatus,

            tsudp.is_default,
            tsudp.id as dpid
    </sql>

    <insert id="addSysUser" parameterType="com.jn.system.user.vo.SysUserVO">
        insert into tb_sys_user (id, account, password,
          name, phone, email,
          creator, create_time, status
          )
        values (#{id,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
          #{name,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
          #{creator,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{status,jdbcType=CHAR}
          )
    </insert>

    <select id="findDepartmentAndPostByUserId" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        u.id,
        u.account,
        u.`name`,
        u.phone,
        u.email,
        u.create_time,
        u.`status`,
        tt.departmentId,
        tt.department_name,
        tt.postId,
        tt.post_name,
        tt.parent_id,
        tt.`level`
        from tb_sys_user u
        left join
        (select
        t2.id as departmentId,
        t2.department_name,
        t2.parent_id,
        t2.`level`,
        t3.id as postId ,
        t3.post_name,
        t1.user_id
        from tb_sys_user_department_post t1,
        tb_sys_department t2,
        tb_sys_post t3
        where t1.department_id = t2.id
        and t1.post_id = t3.id
        and t1.`status` = '1'
        and t2.`status` = '1'
        and t3.`status` = '1') tt
        on u.id = tt.user_id
        where u.id = #{id,jdbcType=VARCHAR}
    </select>

    <select id="findSysUserByPage" resultType="com.jn.system.user.vo.SysUserVO"
            parameterType="com.jn.system.user.model.SysUserPage">
        select
        <include refid="Get_User_Page_Column"/>
        from tb_sys_user t
        left join
        (select
        t1.department_name,
        t3.department_id,
        t2.post_name,
        (select post_type_name
        from tb_sys_post_type
        where id =  t2.post_type_id) as postTypeName,
        t3.user_id,
        t3.is_default
        from tb_sys_department t1
        ,tb_sys_post t2
        ,tb_sys_user_department_post t3
        where t1.id = t3.department_id
        and t2.id = t3.post_id
        and t1.status = '1'
        and t2.status = '1'
        and t3.status = '1'
        <if test="@org.apache.commons.lang.StringUtils@isBlank(departmentId)">
            and t3.is_default = '1'
        </if>
        ) tt on t.id = tt.user_id
        where t.status != '-1'
        <if test="@org.apache.commons.lang.StringUtils@isNotBlank(name)">
            and t.`name` like CONCAT('%', #{name,jdbcType=VARCHAR}, '%')
        </if>
        <if test="@org.apache.commons.lang.StringUtils@isNotBlank(status)">
            and t.status = #{status,jdbcType=VARCHAR}
        </if>
        <if test="@org.apache.commons.lang.StringUtils@isNotBlank(departmentId)">
            and tt.department_id = #{departmentId,jdbcType=VARCHAR}
        </if>
        ORDER BY t.create_time desc, t.id desc
    </select>

    <select id="getSysUserByPageAndPost" resultType="com.jn.system.user.vo.SysUserVO"
            parameterType="com.jn.system.user.model.SysUserPage">
        SELECT
        t.id,
        t.account,
        t.`name`,
        t.phone,
        t.email,
        t.`status`,
        t.createTime,
        t.wechatAccount,
        t.remark,
        t.departmentName,
        t.postName,
        t.postTypeName,
        t.department_id
        from
        (select distinct
        <include refid="Get_User_Page_Column"/>
        from tb_sys_user t
        left join
        (select
        t1.department_name,
        t3.department_id,
        t2.post_name,
        (select post_type_name
        from tb_sys_post_type
        where id =  t2.post_type_id) as postTypeName,
        t3.user_id,
        t3.is_default
        from tb_sys_department t1
        ,tb_sys_post t2
        ,tb_sys_user_department_post t3
        where t1.id = t3.department_id
        and t2.id = t3.post_id
        and t1.status = '1'
        and t2.status = '1'
        and t3.status = '1'
        <if test="@org.apache.commons.lang.StringUtils@isBlank(departmentId)">
            and t3.is_default = '1'
        </if>
        ) tt on t.id = tt.user_id
        where t.status != '-1'
        and tt.`post_name` like CONCAT('%', #{postOrTypeName,jdbcType=VARCHAR}, '%')
        UNION
        select distinct
        <include refid="Get_User_Page_Column"/>
        from tb_sys_user t
        left join
        (select
        t1.department_name,
        t3.department_id,
        t2.post_name,
        (select post_type_name
        from tb_sys_post_type
        where id =  t2.post_type_id) as postTypeName,
        t3.user_id,
        t3.is_default
        from tb_sys_department t1
        ,tb_sys_post t2
        ,tb_sys_user_department_post t3
        where t1.id = t3.department_id
        and t2.id = t3.post_id
        and t1.status = '1'
        and t2.status = '1'
        and t3.status = '1'
        <if test="@org.apache.commons.lang.StringUtils@isBlank(departmentId)">
            and t3.is_default = '1'
        </if>
        ) tt on t.id = tt.user_id
        where t.status != '-1'
        and tt.`postTypeName` like CONCAT('%', #{postOrTypeName,jdbcType=VARCHAR}, '%')) t
        <where>
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(name)">
                and t.`name` like CONCAT('%', #{name,jdbcType=VARCHAR}, '%')
            </if>
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(status)">
                and t.status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="@org.apache.commons.lang.StringUtils@isNotBlank(departmentId)">
                and t.department_id = #{departmentId,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY t.createTime DESC,t.id DESC
    </select>

    <update id="deleteSysUser" parameterType="java.lang.String">
        update tb_sys_user
        set `status` = '-1'
        where id = #{id,jdbcType=VARCHAR}
    </update>

    <update id="updateSysUser" parameterType="com.jn.system.user.vo.SysUserVO">
        update tb_sys_user
        <set>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="creator != null">
                creator = #{creator,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--逻辑删除用户已经具有的用户组-->
    <update id="deleGroupOfUser" parameterType="java.lang.String">
        update tb_sys_user_group
        set `status` = '-1'
        where user_id = #{id,jdbcType=VARCHAR}
    </update>

    <!--逻辑删除用户已经具有的角色-->
    <update id="deleRoleOfUser" parameterType="java.lang.String">
        update tb_sys_user_role
        set `status` = '-1'
        where user_id = #{id,jdbcType=VARCHAR}
    </update>

    <insert id="addDepartmentAndPostToUserBatch" parameterType="java.util.List">
        insert into tb_sys_user_department_post
        (id, user_id,department_id,post_id,is_default,creator,create_time,status) values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id,jdbcType=BIGINT},
            #{item.userId,jdbcType=VARCHAR},
            #{item.departmentId,jdbcType=VARCHAR},
            #{item.postId,jdbcType=VARCHAR},
            #{item.isDefault,jdbcType=VARCHAR},
            #{item.creator,jdbcType=VARCHAR},
            now(),
            #{item.status,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!--清除用户原有部门岗位信息-->
    <update id="deleDepartmentandPost" parameterType="java.lang.String">
        update tb_sys_user_department_post
        set `status` = '-1'
        where user_id = #{id,jdbcType=VARCHAR}
    </update>

    <!--根据用户id返回用户信息-->
    <select id="findSysUserById" parameterType="java.lang.String"
            resultType="com.jn.system.user.vo.SysUserVO">
        select
        <include refid="Base_Column_List"/>
        from tb_sys_user
        where id = #{id,jdbcType=VARCHAR}
    </select>

    <select id="getUserById" resultType="com.jn.system.user.model.SysUser" parameterType="java.lang.String">
        SELECT id,account,`name`,phone,email,create_time as createTime,`status`
        FROM tb_sys_user WHERE id = #{id,jdbcType=VARCHAR} and `status` != '-1'
    </select>

    <update id="deleteUserBranch" parameterType="java.lang.String">
        update tb_sys_user set status=-1
        where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>